from django.db import models
from django.utils.translation import gettext_lazy as _
from django_rest_passwordreset.tokens import get_token_generator



STATE_CHOICES = ('basket', 'new', 'confirmed', 'assembled', 'sent', 'delivered', 'canceled')


class Shop(models.Model):
    name = models.CharField(max_length=30)
    url = models.URLField(null=True, blank=True)
    state = models.BooleanField(default=True)

    class Meta:
        ordering = ('name',)

    def __str__(self):
        return self.name



class Category(models.Model):
    name = models.CharField(max_length=30)
    shop = models.ManyToManyField(Shop, related_name='categories', blank=True)

    class Meta:
        ordering = ('name',)

    def __str__(self):
        return self.name


class Product(models.Model):
    name = models.CharField(max_length=30)
    category = models.ForeignKey(Category, related_name='products', blank=True, on_delete=models.CASCADE)
    model = models.CharField(max_length=100)

    class Meta:
        ordering = ('name',)

    def __str__(self):
        return self.name


class Parameter(models.Model):
    parameter_name = models.CharField(max_length=30, verbose ="name of parameter")

    class Meta:
        verbose_name = 'Product Parameters'
        ordering = ('name',)

    def __str__(self):
        return self.parameter_name


class ProductInfo(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE, blank=True, related_name="information about this product in different shops")
    shop = models.ForeignKey(Shop, on_delete=models.CASCADE, blank=True, related_name="information about this product in different shops")
    quantity = models.IntegerField()
    price = models.PositiveIntegerField()
    price_rrc = models.PositiveIntegerField(verbose ="recommended retail price")

    class Meta:
        verbose_name = 'information about specific product in different shops'



class ProductParameter(models.Model):
    product_info = models.ForeignKey(ProductInfo, on_delete=models.CASCADE)
    parameter = models.ForeignKey(Parameters, on_delete=models.CASCADE)
    parameter_value = models.CharField(max_length=100, verbose ="parameter value")



class Person(models.Model):
    first_name = models.CharField(max_length=30, verbose ="name")
    last_name = models.CharField(max_length=30, verbose ="surname")
    email = models.EmailField(unique=True)

    class Meta:
        ordering = ('email',)

    def __str__(self):
        return f'{self.first_name} {self.last_name}'


class Contact(models.Model):
    user = models.ForeignKey(Person, related_name='contacts', blank=True, on_delete=models.CASCADE)
    street = models.CharField(max_length=100)
    house = models.CharField(max_length=15)
    structure = models.CharField(max_length=15, blank=True)
    building = models.CharField(max_length=15, blank=True)
    apartment = models.CharField(max_length=15, blank=True)
    phone = models.CharField(max_length=20)

    def __str__(self):
        return f'{self.city} {self.street} {self.house}'

    class Meta:
        verbose_name = 'user contacts'


class Order(models.Model):
    user = models.ForeignKey(Person, on_delete=models.CASCADE, related_name='orders',  blank=True)
    state = models.CharField(choices=STATE_CHOICES, max_length=15)
    order_dt = modes.DateTimeField(auto_now_add=True, verbose ="order date and time")
    contact = models.ForeignKey(Contact, related_name='orders', blank=True, null=True, on_delete=models.CASCADE)

    class Meta:
        ordering = ('-dt',)

    def __str__(self):
        return str(self.dt)



class OrderItem(models.Model):
     order = models.ForeignKey(Order, on_delete=models.CASCADE)
     product = models.ForeignKey(Product, on_delete=models.CASCADE)
     quantity = models.PositiveIntegerField()
     shop = models.ForeignKey(Shop, on_delete=models.CASCADE)
     product_info = models.ForeignKey(ProductInfo, related_name='ordered_items', blank=True, on_delete=models.CASCADE)

     class Meta:
         verbose_name = 'item in an order'


class ConfirmEmailToken(models.Model):

    @staticmethod
    def generate_key():
        return get_token_generator().generate_token()

    user = models.ForeignKey(User, related_name='confirm_email_tokens', on_delete=models.CASCADE, verbose_name=_("The User which is associated to this password reset token"))
    created_at = models.DateTimeField(auto_now_add=True, verbose_name=_("When was this token generated"))
    key = models.CharField(_("Key"), max_length=64, db_index=True, unique=True)

    def save(self, *args, **kwargs):
        if not self.key:
            self.key = self.generate_key()
        return super(ConfirmEmailToken, self).save(*args, **kwargs)

    def __str__(self):
        return "Password reset token for user {user}".format(user=self.user)






